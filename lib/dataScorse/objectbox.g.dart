// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/moderls.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3455137915496984925),
      name: 'BlockModel',
      lastPropertyId: const IdUid(13, 8502004963890781653),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5161098043147426232),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1728710702696184925),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 865066042129510171),
            name: 'density',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9138269326732772952),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1231703581385626346),
            name: 'serial',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2437221872808341435),
            name: 'number',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7057603258141935959),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6251606503002622342),
            name: 'scissor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2535073314786204481),
            name: 'width',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7568702163845376926),
            name: 'lenth',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2668608093186993169),
            name: 'hight',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1611262790749081081),
            name: 'isfineshed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8502004963890781653),
            name: 'consumed',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8039096292186739903),
      name: 'ChipBlockModel',
      lastPropertyId: const IdUid(11, 335857849449082254),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1723894473274148788),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1293029057892943547),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2607745681577151905),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3857570628258120567),
            name: 'density',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3377470576308352055),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7265631420908482003),
            name: 'serial',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 723616913922416494),
            name: 'number',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5149715237723501012),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2552889392819777382),
            name: 'lenth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 858050447481691713),
            name: 'scissor',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 335857849449082254),
            name: 'hight',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5797330138316851450),
      name: 'ChipFraction',
      lastPropertyId: const IdUid(4, 723384786869852),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8132835544831914236),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 157453601323903806),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4924068937966365569),
            name: 'lenth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 723384786869852),
            name: 'hight',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 410965004914081312),
      name: 'ChipfinalProducut',
      lastPropertyId: const IdUid(12, 949880256272972618),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7274764983194720485),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3283176418001511197),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3434422341257072723),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 911771025474443994),
            name: 'density',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3089674340728734830),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6693319399002574146),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5549998984100479733),
            name: 'number',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3722382306709174260),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1528561907906733434),
            name: 'lenth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 517577032372052196),
            name: 'hight',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 894017339438552224),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 949880256272972618),
            name: 'scissor',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 7615110658009924289),
      name: 'FinalProductModel',
      lastPropertyId: const IdUid(13, 1138613571369356743),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4681896478672997865),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4145304442360558847),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7278263872219757423),
            name: 'density',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1197011711148628051),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6472655731479756021),
            name: 'amount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3761276748047564009),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3440643873443045227),
            name: 'timeofOut',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3242371779239968884),
            name: 'scissor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5798283901082583866),
            name: 'width',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5026807780936148087),
            name: 'lenth',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2071953395680803433),
            name: 'hight',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 382043617507476524),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1138613571369356743),
            name: 'improted',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 8160946418251103931),
      name: 'FractionModel',
      lastPropertyId: const IdUid(14, 8118816709147143492),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8699214578437706431),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1474711380641400945),
            name: 'blockmodelmum',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1870283643852688121),
            name: 'wedth',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7498198828486937025),
            name: 'lenth',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4232062498063672592),
            name: 'hight',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1270840015396424861),
            name: 'isfineshed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2813275664494154304),
            name: 'density',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 466902491546122287),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7241474341902696291),
            name: 'serial',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6348355151341220309),
            name: 'hscissor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 9043315589196069637),
            name: 'rscissor',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3333144627427371732),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4285878529511015751),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8118816709147143492),
            name: 'timeofRscissor',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 8160946418251103931),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    BlockModel: EntityDefinition<BlockModel>(
        model: _entities[0],
        toOneRelations: (BlockModel object) => [],
        toManyRelations: (BlockModel object) => {},
        getId: (BlockModel object) => object.id,
        setId: (BlockModel object, int id) {
          object.id = id;
        },
        objectToFB: (BlockModel object, fb.Builder fbb) {
          final colorOffset = fbb.writeString(object.color);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, colorOffset);
          fbb.addInt64(2, object.density);
          fbb.addOffset(3, typeOffset);
          fbb.addInt64(4, object.serial);
          fbb.addInt64(5, object.number);
          fbb.addInt64(6, object.time.millisecondsSinceEpoch);
          fbb.addInt64(7, object.scissor);
          fbb.addInt64(8, object.width);
          fbb.addInt64(9, object.lenth);
          fbb.addInt64(10, object.hight);
          fbb.addBool(11, object.isfineshed);
          fbb.addBool(12, object.consumed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final isfineshedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final consumedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final densityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final serialParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final numberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final widthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final lenthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final hightParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final scissorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = BlockModel(
              isfineshed: isfineshedParam,
              consumed: consumedParam,
              id: idParam,
              color: colorParam,
              density: densityParam,
              type: typeParam,
              serial: serialParam,
              number: numberParam,
              time: timeParam,
              width: widthParam,
              lenth: lenthParam,
              hight: hightParam,
              scissor: scissorParam);

          return object;
        }),
    ChipBlockModel: EntityDefinition<ChipBlockModel>(
        model: _entities[1],
        toOneRelations: (ChipBlockModel object) => [],
        toManyRelations: (ChipBlockModel object) => {},
        getId: (ChipBlockModel object) => object.id,
        setId: (ChipBlockModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChipBlockModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final colorOffset = fbb.writeString(object.color);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, colorOffset);
          fbb.addFloat64(3, object.density);
          fbb.addOffset(4, typeOffset);
          fbb.addFloat64(5, object.serial);
          fbb.addFloat64(6, object.number);
          fbb.addFloat64(7, object.width);
          fbb.addFloat64(8, object.lenth);
          fbb.addFloat64(9, object.scissor);
          fbb.addFloat64(10, object.hight);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final scissorParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final densityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final serialParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final numberParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final lenthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final hightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final object = ChipBlockModel(
              id: idParam,
              title: titleParam,
              scissor: scissorParam,
              color: colorParam,
              density: densityParam,
              type: typeParam,
              serial: serialParam,
              number: numberParam,
              width: widthParam,
              lenth: lenthParam,
              hight: hightParam);

          return object;
        }),
    ChipFraction: EntityDefinition<ChipFraction>(
        model: _entities[2],
        toOneRelations: (ChipFraction object) => [],
        toManyRelations: (ChipFraction object) => {},
        getId: (ChipFraction object) => object.id,
        setId: (ChipFraction object, int id) {
          object.id = id;
        },
        objectToFB: (ChipFraction object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.width);
          fbb.addFloat64(2, object.lenth);
          fbb.addFloat64(3, object.hight);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lenthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final hightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = ChipFraction(
              id: idParam,
              width: widthParam,
              lenth: lenthParam,
              hight: hightParam);

          return object;
        }),
    ChipfinalProducut: EntityDefinition<ChipfinalProducut>(
        model: _entities[3],
        toOneRelations: (ChipfinalProducut object) => [],
        toManyRelations: (ChipfinalProducut object) => {},
        getId: (ChipfinalProducut object) => object.id,
        setId: (ChipfinalProducut object, int id) {
          object.id = id;
        },
        objectToFB: (ChipfinalProducut object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final colorOffset = fbb.writeString(object.color);
          final typeOffset = fbb.writeString(object.type);
          final companyOffset = fbb.writeString(object.company);
          final scissorOffset = fbb.writeString(object.scissor);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, colorOffset);
          fbb.addFloat64(3, object.density);
          fbb.addOffset(4, typeOffset);
          fbb.addFloat64(5, object.amount);
          fbb.addFloat64(6, object.number);
          fbb.addFloat64(7, object.width);
          fbb.addFloat64(8, object.lenth);
          fbb.addFloat64(9, object.hight);
          fbb.addOffset(10, companyOffset);
          fbb.addOffset(11, scissorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final scissorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final densityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final numberParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final lenthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final hightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final companyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final object = ChipfinalProducut(
              id: idParam,
              title: titleParam,
              scissor: scissorParam,
              color: colorParam,
              density: densityParam,
              type: typeParam,
              amount: amountParam,
              number: numberParam,
              width: widthParam,
              lenth: lenthParam,
              hight: hightParam,
              company: companyParam);

          return object;
        }),
    FinalProductModel: EntityDefinition<FinalProductModel>(
        model: _entities[4],
        toOneRelations: (FinalProductModel object) => [],
        toManyRelations: (FinalProductModel object) => {},
        getId: (FinalProductModel object) => object.id,
        setId: (FinalProductModel object, int id) {
          object.id = id;
        },
        objectToFB: (FinalProductModel object, fb.Builder fbb) {
          final colorOffset = fbb.writeString(object.color);
          final typeOffset = fbb.writeString(object.type);
          final companyOffset = fbb.writeString(object.company);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, colorOffset);
          fbb.addInt64(2, object.density);
          fbb.addOffset(3, typeOffset);
          fbb.addInt64(4, object.amount);
          fbb.addInt64(5, object.time.millisecondsSinceEpoch);
          fbb.addInt64(6, object.timeofOut.millisecondsSinceEpoch);
          fbb.addInt64(7, object.scissor);
          fbb.addFloat64(8, object.width);
          fbb.addFloat64(9, object.lenth);
          fbb.addFloat64(10, object.hight);
          fbb.addOffset(11, companyOffset);
          fbb.addBool(12, object.improted);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final densityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final timeofOutParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final scissorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final widthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final lenthParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final hightParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final companyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final improtedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final object = FinalProductModel(
              id: idParam,
              color: colorParam,
              density: densityParam,
              type: typeParam,
              amount: amountParam,
              time: timeParam,
              timeofOut: timeofOutParam,
              scissor: scissorParam,
              width: widthParam,
              lenth: lenthParam,
              hight: hightParam,
              company: companyParam,
              improted: improtedParam);

          return object;
        }),
    FractionModel: EntityDefinition<FractionModel>(
        model: _entities[5],
        toOneRelations: (FractionModel object) => [],
        toManyRelations: (FractionModel object) => {},
        getId: (FractionModel object) => object.id,
        setId: (FractionModel object, int id) {
          object.id = id;
        },
        objectToFB: (FractionModel object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final colorOffset = fbb.writeString(object.color);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.blockmodelmum);
          fbb.addInt64(2, object.wedth);
          fbb.addInt64(3, object.lenth);
          fbb.addInt64(4, object.hight);
          fbb.addBool(5, object.isfineshed);
          fbb.addInt64(6, object.density);
          fbb.addOffset(7, typeOffset);
          fbb.addInt64(8, object.serial);
          fbb.addInt64(9, object.hscissor);
          fbb.addInt64(10, object.rscissor);
          fbb.addOffset(11, colorOffset);
          fbb.addInt64(12, object.time.millisecondsSinceEpoch);
          fbb.addInt64(13, object.timeofRscissor.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final timeofRscissorParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));
          final blockmodelmumParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final wedthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final lenthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final hightParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final isfineshedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final densityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final serialParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final hscissorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final rscissorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final object = FractionModel(
              id: idParam,
              timeofRscissor: timeofRscissorParam,
              blockmodelmum: blockmodelmumParam,
              wedth: wedthParam,
              lenth: lenthParam,
              hight: hightParam,
              isfineshed: isfineshedParam,
              density: densityParam,
              type: typeParam,
              serial: serialParam,
              hscissor: hscissorParam,
              rscissor: rscissorParam,
              color: colorParam,
              time: timeParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [BlockModel] entity fields to define ObjectBox queries.
class BlockModel_ {
  /// see [BlockModel.id]
  static final id =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[0]);

  /// see [BlockModel.color]
  static final color =
      QueryStringProperty<BlockModel>(_entities[0].properties[1]);

  /// see [BlockModel.density]
  static final density =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[2]);

  /// see [BlockModel.type]
  static final type =
      QueryStringProperty<BlockModel>(_entities[0].properties[3]);

  /// see [BlockModel.serial]
  static final serial =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[4]);

  /// see [BlockModel.number]
  static final number =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[5]);

  /// see [BlockModel.time]
  static final time =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[6]);

  /// see [BlockModel.scissor]
  static final scissor =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[7]);

  /// see [BlockModel.width]
  static final width =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[8]);

  /// see [BlockModel.lenth]
  static final lenth =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[9]);

  /// see [BlockModel.hight]
  static final hight =
      QueryIntegerProperty<BlockModel>(_entities[0].properties[10]);

  /// see [BlockModel.isfineshed]
  static final isfineshed =
      QueryBooleanProperty<BlockModel>(_entities[0].properties[11]);

  /// see [BlockModel.consumed]
  static final consumed =
      QueryBooleanProperty<BlockModel>(_entities[0].properties[12]);
}

/// [ChipBlockModel] entity fields to define ObjectBox queries.
class ChipBlockModel_ {
  /// see [ChipBlockModel.id]
  static final id =
      QueryIntegerProperty<ChipBlockModel>(_entities[1].properties[0]);

  /// see [ChipBlockModel.title]
  static final title =
      QueryStringProperty<ChipBlockModel>(_entities[1].properties[1]);

  /// see [ChipBlockModel.color]
  static final color =
      QueryStringProperty<ChipBlockModel>(_entities[1].properties[2]);

  /// see [ChipBlockModel.density]
  static final density =
      QueryDoubleProperty<ChipBlockModel>(_entities[1].properties[3]);

  /// see [ChipBlockModel.type]
  static final type =
      QueryStringProperty<ChipBlockModel>(_entities[1].properties[4]);

  /// see [ChipBlockModel.serial]
  static final serial =
      QueryDoubleProperty<ChipBlockModel>(_entities[1].properties[5]);

  /// see [ChipBlockModel.number]
  static final number =
      QueryDoubleProperty<ChipBlockModel>(_entities[1].properties[6]);

  /// see [ChipBlockModel.width]
  static final width =
      QueryDoubleProperty<ChipBlockModel>(_entities[1].properties[7]);

  /// see [ChipBlockModel.lenth]
  static final lenth =
      QueryDoubleProperty<ChipBlockModel>(_entities[1].properties[8]);

  /// see [ChipBlockModel.scissor]
  static final scissor =
      QueryDoubleProperty<ChipBlockModel>(_entities[1].properties[9]);

  /// see [ChipBlockModel.hight]
  static final hight =
      QueryDoubleProperty<ChipBlockModel>(_entities[1].properties[10]);
}

/// [ChipFraction] entity fields to define ObjectBox queries.
class ChipFraction_ {
  /// see [ChipFraction.id]
  static final id =
      QueryIntegerProperty<ChipFraction>(_entities[2].properties[0]);

  /// see [ChipFraction.width]
  static final width =
      QueryDoubleProperty<ChipFraction>(_entities[2].properties[1]);

  /// see [ChipFraction.lenth]
  static final lenth =
      QueryDoubleProperty<ChipFraction>(_entities[2].properties[2]);

  /// see [ChipFraction.hight]
  static final hight =
      QueryDoubleProperty<ChipFraction>(_entities[2].properties[3]);
}

/// [ChipfinalProducut] entity fields to define ObjectBox queries.
class ChipfinalProducut_ {
  /// see [ChipfinalProducut.id]
  static final id =
      QueryIntegerProperty<ChipfinalProducut>(_entities[3].properties[0]);

  /// see [ChipfinalProducut.title]
  static final title =
      QueryStringProperty<ChipfinalProducut>(_entities[3].properties[1]);

  /// see [ChipfinalProducut.color]
  static final color =
      QueryStringProperty<ChipfinalProducut>(_entities[3].properties[2]);

  /// see [ChipfinalProducut.density]
  static final density =
      QueryDoubleProperty<ChipfinalProducut>(_entities[3].properties[3]);

  /// see [ChipfinalProducut.type]
  static final type =
      QueryStringProperty<ChipfinalProducut>(_entities[3].properties[4]);

  /// see [ChipfinalProducut.amount]
  static final amount =
      QueryDoubleProperty<ChipfinalProducut>(_entities[3].properties[5]);

  /// see [ChipfinalProducut.number]
  static final number =
      QueryDoubleProperty<ChipfinalProducut>(_entities[3].properties[6]);

  /// see [ChipfinalProducut.width]
  static final width =
      QueryDoubleProperty<ChipfinalProducut>(_entities[3].properties[7]);

  /// see [ChipfinalProducut.lenth]
  static final lenth =
      QueryDoubleProperty<ChipfinalProducut>(_entities[3].properties[8]);

  /// see [ChipfinalProducut.hight]
  static final hight =
      QueryDoubleProperty<ChipfinalProducut>(_entities[3].properties[9]);

  /// see [ChipfinalProducut.company]
  static final company =
      QueryStringProperty<ChipfinalProducut>(_entities[3].properties[10]);

  /// see [ChipfinalProducut.scissor]
  static final scissor =
      QueryStringProperty<ChipfinalProducut>(_entities[3].properties[11]);
}

/// [FinalProductModel] entity fields to define ObjectBox queries.
class FinalProductModel_ {
  /// see [FinalProductModel.id]
  static final id =
      QueryIntegerProperty<FinalProductModel>(_entities[4].properties[0]);

  /// see [FinalProductModel.color]
  static final color =
      QueryStringProperty<FinalProductModel>(_entities[4].properties[1]);

  /// see [FinalProductModel.density]
  static final density =
      QueryIntegerProperty<FinalProductModel>(_entities[4].properties[2]);

  /// see [FinalProductModel.type]
  static final type =
      QueryStringProperty<FinalProductModel>(_entities[4].properties[3]);

  /// see [FinalProductModel.amount]
  static final amount =
      QueryIntegerProperty<FinalProductModel>(_entities[4].properties[4]);

  /// see [FinalProductModel.time]
  static final time =
      QueryIntegerProperty<FinalProductModel>(_entities[4].properties[5]);

  /// see [FinalProductModel.timeofOut]
  static final timeofOut =
      QueryIntegerProperty<FinalProductModel>(_entities[4].properties[6]);

  /// see [FinalProductModel.scissor]
  static final scissor =
      QueryIntegerProperty<FinalProductModel>(_entities[4].properties[7]);

  /// see [FinalProductModel.width]
  static final width =
      QueryDoubleProperty<FinalProductModel>(_entities[4].properties[8]);

  /// see [FinalProductModel.lenth]
  static final lenth =
      QueryDoubleProperty<FinalProductModel>(_entities[4].properties[9]);

  /// see [FinalProductModel.hight]
  static final hight =
      QueryDoubleProperty<FinalProductModel>(_entities[4].properties[10]);

  /// see [FinalProductModel.company]
  static final company =
      QueryStringProperty<FinalProductModel>(_entities[4].properties[11]);

  /// see [FinalProductModel.improted]
  static final improted =
      QueryBooleanProperty<FinalProductModel>(_entities[4].properties[12]);
}

/// [FractionModel] entity fields to define ObjectBox queries.
class FractionModel_ {
  /// see [FractionModel.id]
  static final id =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[0]);

  /// see [FractionModel.blockmodelmum]
  static final blockmodelmum =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[1]);

  /// see [FractionModel.wedth]
  static final wedth =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[2]);

  /// see [FractionModel.lenth]
  static final lenth =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[3]);

  /// see [FractionModel.hight]
  static final hight =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[4]);

  /// see [FractionModel.isfineshed]
  static final isfineshed =
      QueryBooleanProperty<FractionModel>(_entities[5].properties[5]);

  /// see [FractionModel.density]
  static final density =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[6]);

  /// see [FractionModel.type]
  static final type =
      QueryStringProperty<FractionModel>(_entities[5].properties[7]);

  /// see [FractionModel.serial]
  static final serial =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[8]);

  /// see [FractionModel.hscissor]
  static final hscissor =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[9]);

  /// see [FractionModel.rscissor]
  static final rscissor =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[10]);

  /// see [FractionModel.color]
  static final color =
      QueryStringProperty<FractionModel>(_entities[5].properties[11]);

  /// see [FractionModel.time]
  static final time =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[12]);

  /// see [FractionModel.timeofRscissor]
  static final timeofRscissor =
      QueryIntegerProperty<FractionModel>(_entities[5].properties[13]);
}
